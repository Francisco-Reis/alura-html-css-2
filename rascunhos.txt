-- Medidas de html/css --
px = pixels absolutos nao redimensionaveis
rem = multiplica o tamanho do objeto com relação a fonte em altura (do navegador)
em = multiplica o tamanho do objeto com relação a fonte em altura (do elemento)
ch = multiplica o tamanho do objeto com relação a fonte em largura (do caracter zero)
Usar medidas relativas (em,rem,ch) facilita na redimensão geral, fica centralizado em uma unica
linha de código, referente ao tamanho de fonte.

em = fonte do elemento container
rem = fonte da tag html ou do navegador

-- Position absolute --
Posição absoluta fora do fluxo no container (padrão: em relação a página)
Ex:
> position: absolute;
> top: 3em;
Caso um container tenha o atributo position (div), a posição é em relação ao container
Por exemplo, se o div tiver 'position: relative', o elemento fica absoluto em relação ao div.
OBS: o 'position: static' é o unico que não pega os absolutes de seus filhos

-- border-radius --
Para gerar bordar arredondadas.
Ex:
> div ( border radius: 10px;)
> div ( border radius: 10px 0;) -- somente duas pontas arredondadas
> div ( border radius: 10px 20px 10px 30px;) -- todas as pontas individualmente
Bordas elipticas
> border-radius: <raios na horizontal> / <raios na vertical>
> border-radius: 10% 50% / 50% 10%;

--- Funcionalidades novas (beta) ---
Usar o prefixo:
-webkit- : para Chrome e Safari e Opera
-moz- : para Firefox
-ms- : para IE
Sempre usar sem prefixo também para futuras versões, deixa-la sempre por ultimo (future proof)
Catalogo de funcionalidades Beta: 'caniuse.com'

-- Transform ---
rotacionar: > transform: rotate(30deg);
entortar: > transform: skew(20deg);
aumentar: scale(1.2)
mover: translate(10px, 50px);
OBS: A ordem das transformaçoes conta, sempre da direita pra esquerda na lista
OBS: Transformações nao funcionam em objetos inline, deve-se mudar pra inline-block
transform-origin: muda o ponto de pertida do objeto (padrao no centro)
Calculos para se fazer faixa transversal (fazer calculos manualmente):
Na horizontal: cos(45) * (altura - largura) + largura
Na vertical: -1 * sen(45) * altura

--- Transform 3D ---
translateX,translateY,translateZ: mover o objeto por eixo
perspective: a distancia virtual dos olhos para a tela
perspective-origin: posição da tela do observador
transform-style: preserve-3d -> caso for ter efeito 3d dentro de outro elemento 3d, como um cubo
com suas 6 faces, por exemplo.

-- Sombra --
Sombras para texto:
text-shadow: deslocX deslocY cor;
Para objetos:
box-shadow: deslocX deslocY difusao cor
Exemplo de sombra dentro?
box-shadow: ...(sombra de fora), inset ...(sombra de dentro);

-- Opaco --
Niveis de transparencia de elementos:
opacity: 0.6;
Opacidade de cor, usar
rgba(0,0,0,transpacencia);

-- Gradiente --
Antigamente era feito só por imagens, agora pode ser feito via CSS
> background-image: linear-gradient(direção, primeira cor, segunda cor tamanho%, ... , n cores)
Ex: background-image: linear-gradient(to bottom, red, black);
Para nao ocupara tudo:
> background-size: largura altura;
Para nao repetir:
> backgroound-repeat: no-repeat;
Fazendo faixas transversais translucidas:
> background-image: linear-gradient(135deg, transparent, transparent 14px, rgba(0,0,0,.1) 14px
                  , rgba(0,0,0,.1) 15px, transparent 15px, transparent);
> background-size: 20px 20px;
> background-attachment: fixed; (fixa ao fundo da tela, efeito ao rolar);
Faixa fina em gradiente:
> background-image: linear-gradient(to right, black, #C00, black);
> background-repeat: no-repeat;
> background-size: 80% 5px;
> background-position: 50% 50%;
